openapi: 3.0.0
info:
  description: This is Woleet.ID Server API documentation.
  version: 1.2.0
  title: Woleet.ID Server
  contact:
    email: contact@woleet.com
  license:
    name: MIT
security:
  - CookieAuth: []
paths:
  /login:
    get:
      tags:
        - Authentication
      summary: Log into the system. Both email or username can be used to authentify.
      operationId: login
      security:
        - BasicAuth: []
      responses:
        '200':
          description: User successfully logged in. A session cookie is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserInfo'
        '400':
          description: Missing email/username or password.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Invalid email/username or password.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /logout:
    get:
      tags:
        - Authentication
      summary: Log out from the system.
      operationId: logout
      responses:
        '200':
          description: User successfully logged out.
  /info:
    get:
      tags:
        - Authentication
      summary: Return information about the current logged user.
      operationId: getUserInfo
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserInfo'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /sign:
    get:
      operationId: getSignature
      summary: Sign some data using a key.
      tags:
        - Signature
      description: >
        Use this endpoint to sign a SHA256 hash using one of the keys managed by the server.
        <br>Provide the SHA256 hash to sign in the `hashToSign` parameter.
        <br>When authenticated using an API token, the key to use can be specified using the `pubKey`, `userId` and/or `customUserId` parameters:
        <br>- set the `pubKey` parameter only: the referred key is used
        <br>- set the `userId` (or the `customUserId`) parameter only: the default key of the referred user is used (if any).
        <br>- set none of the 3 parameters: the default key of the server is used (if any).
        <br>When authenticated using an OAuth token, the key to use must be one of the authenticated user's keys and can be specified using the `pubKey` parameter.
        If not specified, the authenticated user's default key is used (if any).
      parameters:
        - $ref: '#/components/parameters/HashToSignQueryParameter'
        - $ref: '#/components/parameters/UserIdQueryParameter'
        - $ref: '#/components/parameters/CustomUserIdQueryParameter'
        - $ref: '#/components/parameters/PubKeyQueryParameter'
      security:
        - APITokenAuth: []
        - OAuthTokenAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResult'
        '400':
          description: Missing or invalid query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad token.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '403':
          description: No `pubKey` parameter is provided and the server or the user has no default key to fallback on.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /identity:
    get:
      operationId: getIdentity
      summary: Get the identity of a user.
      security: []
      tags:
        - Identity
      description: >
        Use this endpoint to verify that the server knows a public key and to get the identity of the user owning that key.
        <br>If the server controls the associated private key, it can also sign some random data and return the produced signature to prove it owns the key.
        <br>The random data is built by concatenating the `leftData` parameter (provided by the client) and some random data generated by the server (returned in the `rightData` field).
        <br>The caller must verify that the returned signature is valid for the public key (which proves the ownership of the private key by the server).
        <br>The caller can optionally read the TLS certificate securing this endpoint to get the certified identity of the owner of the server.
        <br>This endpoint is not protected. It is recommended to expose it publicly.
      parameters:
        - $ref: '#/components/parameters/PubKeyToVerifyQueryParameter'
        - $ref: '#/components/parameters/LeftDataQueryParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        '400':
          description: Missing or invalid query parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: Public key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /discover/users:
    get:
      operationId: discoverUsers
      summary: Get all users matching a search string.
      security:
        - APITokenAuth: []
        - OAuthTokenAuth: []
      tags:
        - Discovery
      description: >
        Use this endpoint to get all users whose `email`, `username`, `identity.commonName`, `identity.organization` or `identity.organizationalUnit` contains the search string.
      parameters:
        - $ref: '#/components/parameters/DiscoverUsersQueryParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserDiscoArray'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /discover/user/{pubKey}:
    get:
      operationId: discoverUserByPubKey
      summary: Get the user associated to a public key.
      security:
        - APITokenAuth: []
        - OAuthTokenAuth: []
      tags:
        - Discovery
      description: >
        Use this endpoint to get the user owning a public key.
      parameters:
        - $ref: '#/components/parameters/PubKeyParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserDisco'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /discover/user:
    get:
      operationId: discoverUser
      summary: Get the current logged user.
      security:
        - APITokenAuth: []
        - OAuthTokenAuth: []
      tags:
        - Discovery
      description: >
        Use this endpoint to get the current logged user.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserDisco'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /discover/keys/{userId}:
    get:
      operationId: discoverUserKeys
      summary: Get all public keys of a user.
      security:
        - APITokenAuth: []
        - OAuthTokenAuth: []
      tags:
        - Discovery
      description: >
        Use this endpoint to get all public keys owned by a user.
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/KeyDiscoArray'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /discover/config:
    get:
      operationId: discoverConfig
      summary: Get the server configuration.
      security:
        - APITokenAuth: []
        - OAuthTokenAuth: []
      tags:
        - Discovery
      description: >
        Use this endpoint to get the server configuration.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ConfigDisco'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /key/{keyId}:
    get:
      tags:
        - Key
      summary: Get a key by its identifier.
      operationId: getKeyById
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGet'
        '400':
          description: Invalid key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
    put:
      tags:
        - Key
      summary: Update a key.
      operationId: updateKey
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/KeyPut'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGet'
        '400':
          description: Invalid key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
    delete:
      tags:
        - Key
      summary: Delete a key.
      operationId: deleteKey
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGet'
        '400':
          description: Invalid key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /user/{userId}/extern-key:
    post:
      tags:
        - Key
      summary: Create a new external key for a user.
      operationId: createExternalKey
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ExternalKeyPost'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/KeyGet'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /user/{userId}/key:
    post:
      tags:
        - Key
      summary: Create a new key for a user.
      operationId: createKey
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/KeyPost'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/KeyGet'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /user/{userId}/key/list:
    get:
      tags:
        - Key
      summary: List all keys of a user.
      operationId: getAllUserKeys
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/KeyArray'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /user:
    post:
      tags:
        - User
      summary: Create a new user.
      operationId: createUser
      requestBody:
        description: User object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserGet'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /user/{userId}:
    get:
      tags:
        - User
      summary: Get a user by his identifier.
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserGet'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
    put:
      tags:
        - User
      summary: Update a user.
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        description: User object to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserGet'
        '400':
          description: Invalid object supplied / Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
    delete:
      tags:
        - User
      summary: Delete a user.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserGet'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /user/list:
    get:
      tags:
        - User
      summary: List all users.
      operationId: getAllUsers
      responses:
        '200':
          description: Array of users.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserArray'
  /api-token:
    post:
      tags:
        - API Token
      summary: Create an API token.
      operationId: createAPIToken
      requestBody:
        description: API token object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APITokenPost'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APITokenGet'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /api-token/{APITokenId}:
    get:
      tags:
        - API Token
      summary: Get an API token by its identifier.
      operationId: getAPITokenById
      parameters:
        - $ref: '#/components/parameters/APITokenIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APITokenGet'
        '400':
          description: Invalid API token identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: API token not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
    put:
      tags:
        - API Token
      summary: Update an API token.
      operationId: updateAPIToken
      parameters:
        - $ref: '#/components/parameters/APITokenIdParameter'
      requestBody:
        description: API token object to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APITokenPut'
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APITokenGet'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: API token not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
    delete:
      tags:
        - API Token
      summary: Delete an API token.
      operationId: deleteAPIToken
      parameters:
        - $ref: '#/components/parameters/APITokenIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APITokenGet'
        '400':
          description: Invalid API token identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: API token not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /api-token/list:
    get:
      tags:
        - API Token
      summary: List all API tokens.
      operationId: getAllAPITokens
      responses:
        '200':
          description: Succesful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APITokenArray'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /server-event/{ServerEventId}:
    get:
      tags:
        - Server Event
      summary: Get a server event by its identifier.
      operationId: getServerEventById
      parameters:
        - $ref: '#/components/parameters/ServerEventIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerEventGet'
        '400':
          description: Invalid Server Event identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: Server Event not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /server-event/list:
    get:
      tags:
        - Server Event
      summary: List all server events.
      operationId: getServerEventList
      responses:
        '200':
          description: Succesful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerEventArray'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /server-config:
    get:
      tags:
        - Server Config
      summary: Get the server configuration.
      operationId: getServerConfig
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerConfig'
        '400':
          description: Invalid API token identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: API token not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
    put:
      tags:
        - Server Config
      summary: Update the server configuration.
      operationId: updateServerConfig
      requestBody:
        $ref: '#/components/requestBodies/ServerConfig'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerConfig'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '404':
          description: API token not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /enrollment:
    post:
      tags:
        - Enrollment
      summary: Create a key enrollment request.
      operationId: createEnrollment
      requestBody:
        $ref: '#/components/requestBodies/EnrollmentPost'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/EnrollmentGet'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /enrollment/list:
    get:
      tags:
        - Enrollment
      summary: List all key enrollment requests.
      operationId: getAllEnrollments
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/EnrollmentArray'
  /enrollment/{EnrollmentId}:
    get:
      tags:
        - Enrollment
      summary: Get a key enrollment request.
      operationId: getEnrollment
      parameters:
        - $ref: '#/components/parameters/EnrollmentIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/EnrollmentGet'
    put:
      tags:
        - Enrollment
      summary: Update a key enrollment request.
      operationId: updateEnrollment
      parameters:
        - $ref: '#/components/parameters/EnrollmentIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/EnrollmentPut'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/EnrollmentGet'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
    delete:
      tags:
        - Enrollment
      summary: Delete a key enrollment request.
      operationId: deleteEnrollment
      parameters:
        - $ref: '#/components/parameters/EnrollmentIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/EnrollmentGet'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /enrollment/{EnrollmentId}/create-signature-request:
    post:
      tags:
        - Enrollment
      summary: Create and send the signature request of the TCU to the owner of the enrolled key.
      security: []
      operationId: createSignatureRequest
      parameters:
        - $ref: '#/components/parameters/EnrollmentIdParameter'
      responses:
        '200':
          description: Successful operation.
        '400':
          description: Invalid object supplied / The signature request creation is not possible.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIError'
  /enrollment/{EnrollmentId}/user:
    get:
      tags:
        - Enrollment
      summary: Get the user of a key enrollment request.
      security: []
      operationId: getEnrollmentUser
      parameters:
        - $ref: '#/components/parameters/EnrollmentIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserGet'
components:
  schemas:
    Identity:
      type: object
      description: User identity provided as a set of X500 Distinguished Name attributes (see https://www.ietf.org/rfc/rfc4519.txt).
      properties:
        commonName:
          type: string
          description: Common name (CN) (2.5.4.3)
          example: "Jim Smith"
        emailAddress:
          type: string
          description: Email Address (EMAILADDRESS) (1.2.840.113549.1.9.1)
          example: "jim.smith@woleet.com"
        organization:
          type: string
          description: Organization name (O) (2.5.4.10)
          example: "Woleet"
        organizationalUnit:
          type: string
          description: Organizational unit name (OU) (2.5.4.11)
          example: "Sales"
        locality:
          type: string
          description: Locality name (L) (2.5.4.7)
          example: "Rennes"
        country:
          type: string
          description: Country code (C) (2.5.4.6)
          example: "FR"
      required:
        - commonName
    Key:
      type: object
      description: Key information.
      properties:
        name:
          type: string
          description: Key name.
          example: "Jim Smith's key"
        pubKey:
          type: string
          description: Public key (bitcoin address when using BIP39 keys).
          example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
        status:
          type: string
          enum:
            - valid
            - expired
        expiration:
          type: integer
          format: int64
          example: 1569542400000
          description: >
            Key expiration date (Unix ms timestamp).
            <br>Note that the field is not returned if the key has no expiration date.
    FullIdentity:
      allOf:
        - $ref: '#/components/schemas/Identity'
        - type: object
          properties:
            userId:
              type: string
              description: Custom user identifier (UID) (0.9.2342.19200300.100.1.1) must be unique for each user.
              example: "wol.jim-smith.01"
    Password:
      type: string
      format: password
      description: User password.
      example: "nSBa+rV3%2/LpD"
    PubKey:
      type: string
      description: Public key (bitcoin address when using BIP39 keys).
      example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    CreatedAt:
      type: integer
      format: int64
      readOnly: true
      description: Date of creation (Unix ms timestamp).
      example: 1529052551419
    UpdatedAt:
      type: integer
      format: int64
      readOnly: true
      description: Date of last modification (Unix ms timestamp).
      example: 1529052551419
    LastUsed:
      type: integer
      format: int64
      readOnly: true
      description: Date of last usage (Unix ms timestamp).
      example: 1529059167339
    LastLogin:
      type: integer
      format: int64
      readOnly: true
      description: Date of last login (Unix ms timestamp).
      example: 1529050155459
    OccurredAt:
      type: integer
      format: int64
      readOnly: true
      description: Date on which an event occurred (Unix ms timestamp).
      example: 1529052551419
    UserRoleEnum:
      type: string
      enum:
        - user
        - admin
      default: "user"
      description: User role.
      example: "user"
    UserStatusEnum:
      type: string
      enum:
        - active
        - blocked
      default: "active"
      description: User status (a `blocked` user cannot sign).
      example: "active"
    KeyStatusEnum:
      type: string
      enum:
        - active
        - blocked
      default: "active"
      description: Key status (a `blocked` key cannot be used to sign).
      example: "active"
    UserBase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: User identifier (allocated by the server).
          example: "7c42e7e9-aec5-4d56-9a3b-bd55e129aae3"
        email:
          type: string
          format: email
          description: User email (can be used for login).
          example: "john.doe@acme.com"
        username:
          type: string
          description: User name (can be used for login).
          example: "johndoe"
        countryCallingCode:
          type: string
          description: User country calling code
          example: "33"
        phone:
          type: string
          description: User phone number
          example: "123456789"
        status:
          $ref: '#/components/schemas/UserStatusEnum'
        role:
          $ref: '#/components/schemas/UserRoleEnum'
        identity:
          $ref: '#/components/schemas/FullIdentity'
        defaultKeyId:
          type: string
          format: uuid
          description: Identifier of the default key to use to sign for this user (cannot be the an external key).
          example: "c7c6e0de-2acb-4311-80b4-17dbf0b76806"
    UserGet:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            lastLogin:
              $ref: '#/components/schemas/LastLogin'
    UserPost:
      allOf:
        - $ref: '#/components/schemas/UserPut'
        - type: object
          required:
            - identity
            - createDefaultKey
          properties:
              createDefaultKey:
                type: boolean
                description: If true create a key holded by the server when this user is created.
    UserPut:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            password:
              $ref: '#/components/schemas/Password'
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/UserGet'
    UserInfo:
      allOf:
        - $ref: '#/components/schemas/UserBase'
    UserDisco:
      allOf:
        - $ref: '#/components/schemas/UserBase'
    UserDiscoArray:
      type: array
      items:
        $ref: '#/components/schemas/UserDisco'
    APITokenStatusEnum:
      type: string
      enum:
        - active
        - blocked
      default: "active"
      description: API token status (a `blocked` API token cannot be used).
      example: "active"
    APITokenBase:
      type: object
      properties:
        name:
          type: string
          description: API token name.
          example: "My API token name"
        status:
          $ref: '#/components/schemas/APITokenStatusEnum'
    APITokenGet:
      allOf:
        - $ref: '#/components/schemas/APITokenBase'
        - type: object
          properties:
            id:
              readOnly: true
              type: string
              format: uuid
              description: API token identifier (allocated by the platform).
              example: "a35c9fee-3893-4eb7-adde-205e1be03209"
            value:
              readOnly: true
              type: string
              description: Token to use for the signature endpoint.
              example: "b9PXEeMpSCyeaPpQiZ3Bvw=="
            userId:
              type: string
              format: uuid
              description: Id of the authorized user.
              example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            lastUsed:
              $ref: '#/components/schemas/LastUsed'
    APITokenPost:
      allOf:
        - $ref: '#/components/schemas/APITokenBase'
        - type: object
          required:
            - name
          properties:
            userId:
              type: string
              format: uuid
              description: Id of the authorized user.
              example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'
    APITokenPut:
      allOf:
        - $ref: '#/components/schemas/APITokenBase'
    APITokenArray:
      type: array
      items:
        $ref: '#/components/schemas/APITokenGet'
    IdentityURL:
      type: string
      format: url
      example: "https://identity.mydomain.com/identity"
      description: >
        Public URL of the `/identity` endpoint (ie. the URL that anyone can use to get the identity associated with a public key).
    ServerConfig:
      type: object
      properties:
        identityURL:
          $ref: '#/components/schemas/IdentityURL'
        defaultKeyId:
          type: string
          format: uuid
          example: "7b8e5c49-18c6-4ef7-9dab-261a5e717b31"
          description: Identifier of the default key to use when signing with no user and no key specified.
        fallbackOnDefaultKey:
          type: boolean
          example: true
          description: True is the server must fallback on the default key (if any).
    ServerEventTypeEnum:
      type: string
      enum:
        - login
        - signature
        - config.edit
        - key.create
        - key.edit
        - key.delete
        - enrollment.create
        - enrollment.create-signature-request
        - enrollment.delete
        - enrollment.edit
        - user.create
        - user.edit
        - user.delete
        - token.create
        - token.edit
        - token.delete
      description: Type of the event.
      example: "user.edit"
    ServerEventBase:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ServerEventTypeEnum'
        occurredAt:
          $ref: '#/components/schemas/OccurredAt'
        authorizedUserId:
          type: string
          format: uuid
          description: Identifier of the user that triggered the event.
          example: "2b5ced14-01c5-419d-a0ae-aa9622918ca6"
        authorizedTokenId:
          type: string
          format: uuid
          description: Identifier of the API token used to authentify.
          example: "fd7cb389-91e6-41ba-a0a5-14a05bd2b5f7"
        associatedTokenId:
          type: string
          format: uuid
          description: Identifier of the related API token.
          example: "e2611d40-166f-4d7e-9fc5-164972878646"
        associatedUserId:
          type: string
          format: uuid
          description: Identifier of the related user.
          example: "a84996d3-9a77-4e8c-947f-f00c4d64a167"
        associatedKeyId:
          type: string
          format: uuid
          description: Identifier of the related key.
          example: "461816ca-5623-4417-a2d1-5ee960f0a7a9"
    ServerEventGet:
      allOf:
        - $ref: '#/components/schemas/ServerEventBase'
        - type: object
          properties:
            data:
              type: object
              description: Specific additional data associated with the event.
              example: { "username": "foo", "identity": {"countryName": "FR"} }
    ServerEventArray:
      type: array
      items:
        $ref: '#/components/schemas/ServerEventGet'
    KeyTypeEnum:
      type: string
      enum:
        - bip39
      description: Key type.
      example: "bip39"
    KeyDeviceEnum:
      type: string
      enum:
        - server
        - nano
        - mobile
      description: Key device.
      example: "server"
    KeyHolderEnum:
      type: string
      enum:
        - server
        - user
      description: The entity who hold the private key.
      example: "server"
    KeyBase:
      type: object
      properties:
        name:
          type: string
          description: Key name.
          example: "Jim Smith's key"
        expiration:
          type: integer
          format: int64
          example: 1569542400000
          description: >
            Key expiration date (Unix ms timestamp).
            <br>Note that the field is not returned if the key has no expiration date.
        status:
          $ref: '#/components/schemas/KeyStatusEnum'
    KeyGet:
      allOf:
        - $ref: '#/components/schemas/KeyBase'
        - type: object
          required:
            - name
          properties:
            id:
              readOnly: true
              type: string
              format: uuid
              description: Key identifier (allocated by the platform).
              example: "a35c9fee-3893-4eb7-adde-205e1be03209"
            pubKey:
              $ref: '#/components/schemas/PubKey'
            type:
              $ref: '#/components/schemas/KeyTypeEnum'
            holder:
              $ref: '#/components/schemas/KeyHolderEnum'
            device:
              $ref: '#/components/schemas/KeyDeviceEnum'
            expired:
              type: boolean
              example: false
              description: >
                Indicates whether the key has expired or not.
                <br>Note that the field is not returned if the key has not expired.
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            lastUsed:
              $ref: '#/components/schemas/LastUsed'
    KeyPost:
      allOf:
        - $ref: '#/components/schemas/KeyBase'
        - type: object
          required:
            - name
    KeyPut:
      allOf:
        - $ref: '#/components/schemas/KeyBase'
        - type: object
          properties:
            device:
              $ref: '#/components/schemas/KeyDeviceEnum'
    KeyArray:
      type: array
      items:
        $ref: '#/components/schemas/KeyGet'
    KeyDisco:
      allOf:
        - $ref: '#/components/schemas/KeyGet'
    KeyDiscoArray:
      type: array
      items:
        $ref: '#/components/schemas/KeyDisco'
    ConfigDisco:
      type: object
      properties:
        identityURL:
          $ref: '#/components/schemas/IdentityURL'
    ExternalKeyPost:
      type: object
      properties:
        name:
          type: string
          description: Key name.
          example: "Jim Smith's key"
        publicKey:
          type: string
          description: Key address.
          example: "1HA79GnnZdHLZBMBQusXcgPEeMcrpnWahb"
        device:
          $ref: '#/components/schemas/KeyDeviceEnum'
        status:
          $ref: '#/components/schemas/KeyStatusEnum'
        expiration:
          type: integer
          format: int64
          example: 1569542400000
          description: >
            Key expiration date (Unix ms timestamp).
      required:
        - name
        - publicKey
    SignatureResult:
      type: object
      properties:
        pubKey:
          type: string
          format: base58
          example: "1KjQ8LgUgYVSqeK7JFhA9W8FVsHCzFrFi8"
          description: Public key used to sign (must be the same as the `pubKey` parameter if provided).
        signedHash:
          type: string
          format: hex
          example: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
          description: SHA256 hash that is signed (same as the `hashToSign` parameter).
        signature:
          type: string
          format: base64
          example: "IKnOvW2/BQqahssC2l9Icz7qiJQqesgu0HCKvW/L5xZLaMCLyg19ATDNJojMILdUijFOqiRzgk6ieDXi89DeB0Q="
          description: Signature of `hashToSign` using the public key `pubKey`.
        identityURL:
          $ref: '#/components/schemas/IdentityURL'
    IdentityResult:
      allOf:
        - type: object
          properties:
            rightData:
              type: string
              description: >
                The right part of the signed data (generated randomly).
                <br>To prevent man-in-the-middle attacks, the data starts with the server's identity URL and this should be verified by the caller.
            signature:
              type: string
              format: base64
              example: "IKnOvW2/BQqahssC2l9Icz7qiJQqesgu0HCKvW/L5xZLaMCLyg19ATDNJojMILdUijFOqiRzgk6ieDXi89DeB0Q="
              description: >
                The signature of the concatenation of `leftData` and `rightData` using the public key `pubKey`.
            identity:
              $ref: '#/components/schemas/Identity'
            key:
              $ref: '#/components/schemas/Key'
    APIError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              example: 418
            message:
              type: string
              example: "I'm a teapot"
          required:
            - code
            - message
    EnrollmentBase:
      type: object
      properties:
        name:
          type: string
          description: Name of the enrolled key.
          example: 'test'
        device:
          $ref: '#/components/schemas/KeyDeviceEnum'
        expiration:
          type: integer
          format: int64
          example: 1569542400000
          description: >
            Enrollment expiration date (Unix ms timestamp).
            <br>Note that the field is not returned if the enrollment has no expiration date.
    EnrollmentGet:
      allOf:
        - $ref: '#/components/schemas/EnrollmentBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Enrollment identifier (allocated by the server).
              example: "feb37e23-d04e-4e71-bf53-1f1a75ba3a68"
            userId:
              type: string
              format: uuid
              description: Id of the enrolled user.
              example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'
    EnrollmentPost:
      allOf:
        - $ref: '#/components/schemas/EnrollmentBase'
        - type: object
          required:
            - userId
            - name
          properties:
            userId:
              type: string
              format: uuid
              description: Id of the enrolled user.
              example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'
            test:
              type: boolean
              description: True if it's a test.
    EnrollmentPut:
      allOf:
        - $ref: '#/components/schemas/EnrollmentBase'
    EnrollmentArray:
      type: array
      items:
        $ref: '#/components/schemas/EnrollmentGet'
  parameters:
    UserIdParameter:
      name: userId
      in: path
      description: Identifier of the user.
      required: true
      schema:
        type: string
        format: uuid
        example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'
    KeyIdParameter:
      name: keyId
      in: path
      description: Identifier of the key.
      required: true
      schema:
        type: string
        format: uuid
        example: "552aa3fd-3b5e-434f-bdd3-9b6c58c269c1"
    APITokenIdParameter:
      name: APITokenId
      in: path
      description: Identifier of the API token.
      required: true
      schema:
        type: string
        format: uuid
        example: "f34d92e3-4f71-49ab-862f-69443bd48266"
    ServerEventIdParameter:
      name: ServerEventId
      in: path
      description: Identifier of the server event.
      required: true
      schema:
        type: string
        format: uuid
        example: "813797c8-01e3-4a80-8068-bc2bda13df16"
    PubKeyQueryParameter:
      name: pubKey
      in: query
      description: >
        The public key to use to sign.
        <br>When not provided and a user is provided, the default key of the user is used (if any).
        <br>When not provided and no user is provided, the default key of the server is used (if any).
      required: false
      schema:
        type: string
        example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    PubKeyToVerifyQueryParameter:
      name: pubKey
      in: query
      description: Public key to verify.
      required: true
      schema:
        type: string
        example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    PubKeyParameter:
      name: pubKey
      in: path
      description: Public key (bitcoin address when using BIP39 keys).
      required: true
      schema:
        type: string
        example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    DiscoverUsersQueryParameter:
      name: search
      in: query
      description: A string used to search users through the fields `email`, `username`, `x500CommonName`, `x500Organization` and `x500OrganizationalUnit`.
      required: true
      schema:
        type: string
        example:
          email:
            value: "john.doe@acme.com"
          username:
            value: "johndoe"
          x500CommonName:
            value: "John Doe"
          x500Organization:
            value: "Acme corp"
          x500OrganizationalUnit:
            value: "Business unit"
    CustomUserIdQueryParameter:
      name: customUserId
      in: query
      description: Custom user identifier (ie. `userId` field of the user's identity).
      required: false
      schema:
        type: string
        example: "wol.jim-smith.01"
    UserIdQueryParameter:
      name: userId
      in: query
      description: User identifier.
      required: false
      schema:
        type: string
        format: uuid
        example: "345a4513-0266-419a-8344-2daf645b78ed"
    LeftDataQueryParameter:
      name: leftData
      in: query
      description: >
        Left part of the random data to sign (should be generated randomly).
        <br>When not provided, the server does not return a signature, even if it controls the key.
      required: false
      schema:
        type: string
        example: '00c8a2b0c373050e7f2abbb2e4c631a42c10d402'
    HashToSignQueryParameter:
      name: hashToSign
      in: query
      description: SHA256 hash to be signed (a string formatted like [a-f0-9]{64}).
      required: true
      schema:
        type: string
        example: 'd8e734d7c02e5b889e3e15acd5aaf231a67e1d9974f17b2c907148c4f4a7f975'
    EnrollmentIdParameter:
      name: EnrollmentId
      in: path
      description: Identifier of the enrollment.
      required: true
      schema:
        type: string
        format: uuid
        example: "813797c8-01e3-4a80-8068-bc2bda13df16"
  requestBodies:
    KeyPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyPost'
      description: Key object to add.
      required: true
    ExternalKeyPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExternalKeyPost'
      description: External key object to add.
      required: true
    KeyPut:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyPut'
      description: Replacement key object.
      required: true
    APITokenPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APITokenPost'
      description: API token object to add.
      required: true
    APITokenPut:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APITokenPut'
      description: Replacement API token object.
      required: true
    ServerConfig:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerConfig'
      description: Replacement server config object.
      required: true
    EnrollmentPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EnrollmentPost'
      description: Enrollment object to add.
      required: true
    EnrollmentPut:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EnrollmentPut'
      description: Enrollment object to update.
      required: true
  responses:
    UserGet:
      $ref: '#/components/schemas/UserGet'
    UserArray:
      $ref: '#/components/schemas/UserArray'
    UserInfo:
      $ref: '#/components/schemas/UserInfo'
    UserDisco:
      $ref: '#/components/schemas/UserDisco'
    KeyDiscoArray:
      $ref: '#/components/schemas/KeyDiscoArray'
    UserDiscoArray:
      $ref: '#/components/schemas/UserDiscoArray'
    ConfigDisco:
      $ref: '#/components/schemas/ConfigDisco'
    APIError:
      $ref: '#/components/schemas/APIError'
    KeyGet:
      $ref: '#/components/schemas/KeyGet'
    KeyArray:
      $ref: '#/components/schemas/KeyArray'
    APITokenGet:
      $ref: '#/components/schemas/APITokenGet'
    APITokenArray:
      $ref: '#/components/schemas/APITokenArray'
    ServerConfig:
      $ref: '#/components/schemas/ServerConfig'
    ServerEventGet:
      $ref: '#/components/schemas/ServerEventGet'
    ServerEventArray:
      $ref: '#/components/schemas/ServerEventArray'
    EnrollmentGet:
      $ref: '#/components/schemas/EnrollmentGet'
    EnrollmentArray:
      $ref: '#/components/schemas/EnrollmentArray'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: Use email/username and password to authenticate.
    CookieAuth:
      type: apiKey
      in: cookie
      name: session
      description: Use a session cookie to authentify (see /login).
    APITokenAuth:
      type: http
      scheme: bearer
      description: Use an API token to authentify (see /api-token).
    OAuthTokenAuth:
      type: http
      scheme: bearer
      description: Use an OAuth access token to authentify.
