/*
 * Woleet.ID Server
 * This is Woleet.ID Server API documentation.
 *
 * The version of the OpenAPI document: 1.2.6
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.idserver.api;

import io.woleet.idserver.ApiCallback;
import io.woleet.idserver.ApiClient;
import io.woleet.idserver.ApiException;
import io.woleet.idserver.ApiResponse;
import io.woleet.idserver.Configuration;
import io.woleet.idserver.Pair;
import io.woleet.idserver.ProgressRequestBody;
import io.woleet.idserver.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.woleet.idserver.api.model.APIError;
import io.woleet.idserver.api.model.EnrollmentBase;
import io.woleet.idserver.api.model.EnrollmentGet;
import io.woleet.idserver.api.model.EnrollmentPost;
import io.woleet.idserver.api.model.EnrollmentPut;
import java.util.UUID;
import io.woleet.idserver.api.model.UserGet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnrollmentApi {
    private ApiClient localVarApiClient;

    public EnrollmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnrollmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createEnrollment
     * @param enrollmentPost Enrollment object to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnrollmentCall(EnrollmentPost enrollmentPost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = enrollmentPost;

        // create path and map variables
        String localVarPath = "/enrollment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnrollmentValidateBeforeCall(EnrollmentPost enrollmentPost, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'enrollmentPost' is set
        if (enrollmentPost == null) {
            throw new ApiException("Missing the required parameter 'enrollmentPost' when calling createEnrollment(Async)");
        }
        

        okhttp3.Call localVarCall = createEnrollmentCall(enrollmentPost, _callback);
        return localVarCall;

    }

    /**
     * Create a key enrollment request.
     * 
     * @param enrollmentPost Enrollment object to add. (required)
     * @return EnrollmentGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public EnrollmentGet createEnrollment(EnrollmentPost enrollmentPost) throws ApiException {
        ApiResponse<EnrollmentGet> localVarResp = createEnrollmentWithHttpInfo(enrollmentPost);
        return localVarResp.getData();
    }

    /**
     * Create a key enrollment request.
     * 
     * @param enrollmentPost Enrollment object to add. (required)
     * @return ApiResponse&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnrollmentGet> createEnrollmentWithHttpInfo(EnrollmentPost enrollmentPost) throws ApiException {
        okhttp3.Call localVarCall = createEnrollmentValidateBeforeCall(enrollmentPost, null);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a key enrollment request. (asynchronously)
     * 
     * @param enrollmentPost Enrollment object to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnrollmentAsync(EnrollmentPost enrollmentPost, final ApiCallback<EnrollmentGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnrollmentValidateBeforeCall(enrollmentPost, _callback);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSignatureRequest
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied / The signature request creation is not possible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSignatureRequestCall(UUID enrollmentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}/create-signature-request"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", localVarApiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSignatureRequestValidateBeforeCall(UUID enrollmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling createSignatureRequest(Async)");
        }
        

        okhttp3.Call localVarCall = createSignatureRequestCall(enrollmentId, _callback);
        return localVarCall;

    }

    /**
     * Create and send the signature request of the TCU to the owner of the enrolled key.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied / The signature request creation is not possible. </td><td>  -  </td></tr>
     </table>
     */
    public void createSignatureRequest(UUID enrollmentId) throws ApiException {
        createSignatureRequestWithHttpInfo(enrollmentId);
    }

    /**
     * Create and send the signature request of the TCU to the owner of the enrolled key.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied / The signature request creation is not possible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createSignatureRequestWithHttpInfo(UUID enrollmentId) throws ApiException {
        okhttp3.Call localVarCall = createSignatureRequestValidateBeforeCall(enrollmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create and send the signature request of the TCU to the owner of the enrolled key. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied / The signature request creation is not possible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSignatureRequestAsync(UUID enrollmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSignatureRequestValidateBeforeCall(enrollmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEnrollment
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnrollmentCall(UUID enrollmentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", localVarApiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnrollmentValidateBeforeCall(UUID enrollmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling deleteEnrollment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEnrollmentCall(enrollmentId, _callback);
        return localVarCall;

    }

    /**
     * Delete a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return EnrollmentGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public EnrollmentGet deleteEnrollment(UUID enrollmentId) throws ApiException {
        ApiResponse<EnrollmentGet> localVarResp = deleteEnrollmentWithHttpInfo(enrollmentId);
        return localVarResp.getData();
    }

    /**
     * Delete a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return ApiResponse&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnrollmentGet> deleteEnrollmentWithHttpInfo(UUID enrollmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteEnrollmentValidateBeforeCall(enrollmentId, null);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a key enrollment request. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnrollmentAsync(UUID enrollmentId, final ApiCallback<EnrollmentGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnrollmentValidateBeforeCall(enrollmentId, _callback);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllEnrollments
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllEnrollmentsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enrollment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllEnrollmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllEnrollmentsCall(_callback);
        return localVarCall;

    }

    /**
     * List all key enrollment requests.
     * 
     * @return List&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public List<EnrollmentGet> getAllEnrollments() throws ApiException {
        ApiResponse<List<EnrollmentGet>> localVarResp = getAllEnrollmentsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all key enrollment requests.
     * 
     * @return ApiResponse&lt;List&lt;EnrollmentGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnrollmentGet>> getAllEnrollmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllEnrollmentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<EnrollmentGet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all key enrollment requests. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllEnrollmentsAsync(final ApiCallback<List<EnrollmentGet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllEnrollmentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<EnrollmentGet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnrollment
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnrollmentCall(UUID enrollmentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", localVarApiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnrollmentValidateBeforeCall(UUID enrollmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling getEnrollment(Async)");
        }
        

        okhttp3.Call localVarCall = getEnrollmentCall(enrollmentId, _callback);
        return localVarCall;

    }

    /**
     * Get a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return EnrollmentGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public EnrollmentGet getEnrollment(UUID enrollmentId) throws ApiException {
        ApiResponse<EnrollmentGet> localVarResp = getEnrollmentWithHttpInfo(enrollmentId);
        return localVarResp.getData();
    }

    /**
     * Get a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return ApiResponse&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnrollmentGet> getEnrollmentWithHttpInfo(UUID enrollmentId) throws ApiException {
        okhttp3.Call localVarCall = getEnrollmentValidateBeforeCall(enrollmentId, null);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a key enrollment request. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnrollmentAsync(UUID enrollmentId, final ApiCallback<EnrollmentGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnrollmentValidateBeforeCall(enrollmentId, _callback);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnrollmentUser
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnrollmentUserCall(UUID enrollmentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}/user"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", localVarApiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnrollmentUserValidateBeforeCall(UUID enrollmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling getEnrollmentUser(Async)");
        }
        

        okhttp3.Call localVarCall = getEnrollmentUserCall(enrollmentId, _callback);
        return localVarCall;

    }

    /**
     * Get the user of a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UserGet getEnrollmentUser(UUID enrollmentId) throws ApiException {
        ApiResponse<UserGet> localVarResp = getEnrollmentUserWithHttpInfo(enrollmentId);
        return localVarResp.getData();
    }

    /**
     * Get the user of a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGet> getEnrollmentUserWithHttpInfo(UUID enrollmentId) throws ApiException {
        okhttp3.Call localVarCall = getEnrollmentUserValidateBeforeCall(enrollmentId, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user of a key enrollment request. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnrollmentUserAsync(UUID enrollmentId, final ApiCallback<UserGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnrollmentUserValidateBeforeCall(enrollmentId, _callback);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEnrollment
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param enrollmentPut Enrollment object to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnrollmentCall(UUID enrollmentId, EnrollmentPut enrollmentPut, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = enrollmentPut;

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", localVarApiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnrollmentValidateBeforeCall(UUID enrollmentId, EnrollmentPut enrollmentPut, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling updateEnrollment(Async)");
        }
        
        // verify the required parameter 'enrollmentPut' is set
        if (enrollmentPut == null) {
            throw new ApiException("Missing the required parameter 'enrollmentPut' when calling updateEnrollment(Async)");
        }
        

        okhttp3.Call localVarCall = updateEnrollmentCall(enrollmentId, enrollmentPut, _callback);
        return localVarCall;

    }

    /**
     * Update a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param enrollmentPut Enrollment object to update. (required)
     * @return EnrollmentGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public EnrollmentGet updateEnrollment(UUID enrollmentId, EnrollmentPut enrollmentPut) throws ApiException {
        ApiResponse<EnrollmentGet> localVarResp = updateEnrollmentWithHttpInfo(enrollmentId, enrollmentPut);
        return localVarResp.getData();
    }

    /**
     * Update a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param enrollmentPut Enrollment object to update. (required)
     * @return ApiResponse&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnrollmentGet> updateEnrollmentWithHttpInfo(UUID enrollmentId, EnrollmentPut enrollmentPut) throws ApiException {
        okhttp3.Call localVarCall = updateEnrollmentValidateBeforeCall(enrollmentId, enrollmentPut, null);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a key enrollment request. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param enrollmentPut Enrollment object to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnrollmentAsync(UUID enrollmentId, EnrollmentPut enrollmentPut, final ApiCallback<EnrollmentGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnrollmentValidateBeforeCall(enrollmentId, enrollmentPut, _callback);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
