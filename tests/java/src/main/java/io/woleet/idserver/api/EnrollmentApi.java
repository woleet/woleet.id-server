/*
 * Woleet.ID Server
 * This is Woleet.ID Server API documentation.
 *
 * OpenAPI spec version: 1.2.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.idserver.api;

import io.woleet.idserver.ApiCallback;
import io.woleet.idserver.ApiClient;
import io.woleet.idserver.ApiException;
import io.woleet.idserver.ApiResponse;
import io.woleet.idserver.Configuration;
import io.woleet.idserver.Pair;
import io.woleet.idserver.ProgressRequestBody;
import io.woleet.idserver.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.woleet.idserver.api.model.APIError;
import io.woleet.idserver.api.model.EnrollmentBase;
import io.woleet.idserver.api.model.EnrollmentGet;
import io.woleet.idserver.api.model.EnrollmentPost;
import io.woleet.idserver.api.model.EnrollmentPut;
import java.util.UUID;
import io.woleet.idserver.api.model.UserGet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnrollmentApi {
    private ApiClient apiClient;

    public EnrollmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnrollmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEnrollment
     * @param enrollmentPost Enrollment object to add. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEnrollmentCall(EnrollmentPost enrollmentPost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = enrollmentPost;

        // create path and map variables
        String localVarPath = "/enrollment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEnrollmentValidateBeforeCall(EnrollmentPost enrollmentPost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentPost' is set
        if (enrollmentPost == null) {
            throw new ApiException("Missing the required parameter 'enrollmentPost' when calling createEnrollment(Async)");
        }
        

        com.squareup.okhttp.Call call = createEnrollmentCall(enrollmentPost, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a key enrollment request.
     * 
     * @param enrollmentPost Enrollment object to add. (required)
     * @return EnrollmentGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnrollmentGet createEnrollment(EnrollmentPost enrollmentPost) throws ApiException {
        ApiResponse<EnrollmentGet> resp = createEnrollmentWithHttpInfo(enrollmentPost);
        return resp.getData();
    }

    /**
     * Create a key enrollment request.
     * 
     * @param enrollmentPost Enrollment object to add. (required)
     * @return ApiResponse&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnrollmentGet> createEnrollmentWithHttpInfo(EnrollmentPost enrollmentPost) throws ApiException {
        com.squareup.okhttp.Call call = createEnrollmentValidateBeforeCall(enrollmentPost, null, null);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a key enrollment request. (asynchronously)
     * 
     * @param enrollmentPost Enrollment object to add. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEnrollmentAsync(EnrollmentPost enrollmentPost, final ApiCallback<EnrollmentGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEnrollmentValidateBeforeCall(enrollmentPost, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSignatureRequest
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSignatureRequestCall(UUID enrollmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}/create-signature-request"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", apiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSignatureRequestValidateBeforeCall(UUID enrollmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling createSignatureRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = createSignatureRequestCall(enrollmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create and send the signature request of the TCU to the owner of the enrolled key.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createSignatureRequest(UUID enrollmentId) throws ApiException {
        createSignatureRequestWithHttpInfo(enrollmentId);
    }

    /**
     * Create and send the signature request of the TCU to the owner of the enrolled key.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createSignatureRequestWithHttpInfo(UUID enrollmentId) throws ApiException {
        com.squareup.okhttp.Call call = createSignatureRequestValidateBeforeCall(enrollmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create and send the signature request of the TCU to the owner of the enrolled key. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSignatureRequestAsync(UUID enrollmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSignatureRequestValidateBeforeCall(enrollmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEnrollment
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEnrollmentCall(UUID enrollmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", apiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEnrollmentValidateBeforeCall(UUID enrollmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling deleteEnrollment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEnrollmentCall(enrollmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return EnrollmentGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnrollmentGet deleteEnrollment(UUID enrollmentId) throws ApiException {
        ApiResponse<EnrollmentGet> resp = deleteEnrollmentWithHttpInfo(enrollmentId);
        return resp.getData();
    }

    /**
     * Delete a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return ApiResponse&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnrollmentGet> deleteEnrollmentWithHttpInfo(UUID enrollmentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEnrollmentValidateBeforeCall(enrollmentId, null, null);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a key enrollment request. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEnrollmentAsync(UUID enrollmentId, final ApiCallback<EnrollmentGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEnrollmentValidateBeforeCall(enrollmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllEnrollments
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllEnrollmentsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/enrollment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllEnrollmentsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllEnrollmentsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all key enrollment requests.
     * 
     * @return List&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EnrollmentGet> getAllEnrollments() throws ApiException {
        ApiResponse<List<EnrollmentGet>> resp = getAllEnrollmentsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all key enrollment requests.
     * 
     * @return ApiResponse&lt;List&lt;EnrollmentGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EnrollmentGet>> getAllEnrollmentsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllEnrollmentsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<EnrollmentGet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all key enrollment requests. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllEnrollmentsAsync(final ApiCallback<List<EnrollmentGet>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllEnrollmentsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EnrollmentGet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnrollment
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEnrollmentCall(UUID enrollmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", apiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEnrollmentValidateBeforeCall(UUID enrollmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling getEnrollment(Async)");
        }
        

        com.squareup.okhttp.Call call = getEnrollmentCall(enrollmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return EnrollmentGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnrollmentGet getEnrollment(UUID enrollmentId) throws ApiException {
        ApiResponse<EnrollmentGet> resp = getEnrollmentWithHttpInfo(enrollmentId);
        return resp.getData();
    }

    /**
     * Get a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return ApiResponse&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnrollmentGet> getEnrollmentWithHttpInfo(UUID enrollmentId) throws ApiException {
        com.squareup.okhttp.Call call = getEnrollmentValidateBeforeCall(enrollmentId, null, null);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a key enrollment request. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEnrollmentAsync(UUID enrollmentId, final ApiCallback<EnrollmentGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEnrollmentValidateBeforeCall(enrollmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnrollmentUser
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEnrollmentUserCall(UUID enrollmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}/user"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", apiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEnrollmentUserValidateBeforeCall(UUID enrollmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling getEnrollmentUser(Async)");
        }
        

        com.squareup.okhttp.Call call = getEnrollmentUserCall(enrollmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the user of a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserGet getEnrollmentUser(UUID enrollmentId) throws ApiException {
        ApiResponse<UserGet> resp = getEnrollmentUserWithHttpInfo(enrollmentId);
        return resp.getData();
    }

    /**
     * Get the user of a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserGet> getEnrollmentUserWithHttpInfo(UUID enrollmentId) throws ApiException {
        com.squareup.okhttp.Call call = getEnrollmentUserValidateBeforeCall(enrollmentId, null, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the user of a key enrollment request. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEnrollmentUserAsync(UUID enrollmentId, final ApiCallback<UserGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEnrollmentUserValidateBeforeCall(enrollmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEnrollment
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param enrollmentPut Enrollment object to update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEnrollmentCall(UUID enrollmentId, EnrollmentPut enrollmentPut, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = enrollmentPut;

        // create path and map variables
        String localVarPath = "/enrollment/{EnrollmentId}"
            .replaceAll("\\{" + "EnrollmentId" + "\\}", apiClient.escapeString(enrollmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEnrollmentValidateBeforeCall(UUID enrollmentId, EnrollmentPut enrollmentPut, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentId' is set
        if (enrollmentId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentId' when calling updateEnrollment(Async)");
        }
        
        // verify the required parameter 'enrollmentPut' is set
        if (enrollmentPut == null) {
            throw new ApiException("Missing the required parameter 'enrollmentPut' when calling updateEnrollment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEnrollmentCall(enrollmentId, enrollmentPut, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param enrollmentPut Enrollment object to update. (required)
     * @return EnrollmentGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnrollmentGet updateEnrollment(UUID enrollmentId, EnrollmentPut enrollmentPut) throws ApiException {
        ApiResponse<EnrollmentGet> resp = updateEnrollmentWithHttpInfo(enrollmentId, enrollmentPut);
        return resp.getData();
    }

    /**
     * Update a key enrollment request.
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param enrollmentPut Enrollment object to update. (required)
     * @return ApiResponse&lt;EnrollmentGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnrollmentGet> updateEnrollmentWithHttpInfo(UUID enrollmentId, EnrollmentPut enrollmentPut) throws ApiException {
        com.squareup.okhttp.Call call = updateEnrollmentValidateBeforeCall(enrollmentId, enrollmentPut, null, null);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a key enrollment request. (asynchronously)
     * 
     * @param enrollmentId Identifier of the enrollment. (required)
     * @param enrollmentPut Enrollment object to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEnrollmentAsync(UUID enrollmentId, EnrollmentPut enrollmentPut, final ApiCallback<EnrollmentGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEnrollmentValidateBeforeCall(enrollmentId, enrollmentPut, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnrollmentGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
