/*
 * Woleet.ID Server
 * This is Woleet.ID Server API documentation.
 *
 * OpenAPI spec version: 1.2.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.idserver.api;

import io.woleet.idserver.ApiCallback;
import io.woleet.idserver.ApiClient;
import io.woleet.idserver.ApiException;
import io.woleet.idserver.ApiResponse;
import io.woleet.idserver.Configuration;
import io.woleet.idserver.Pair;
import io.woleet.idserver.ProgressRequestBody;
import io.woleet.idserver.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.woleet.idserver.api.model.APIError;
import java.util.UUID;
import io.woleet.idserver.api.model.UserGet;
import io.woleet.idserver.api.model.UserPost;
import io.woleet.idserver.api.model.UserPut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient apiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUser
     * @param userPost User object to create. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCall(UserPost userPost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userPost;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(UserPost userPost, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userPost' is set
        if (userPost == null) {
            throw new ApiException("Missing the required parameter 'userPost' when calling createUser(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserCall(userPost, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new user.
     * 
     * @param userPost User object to create. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserGet createUser(UserPost userPost) throws ApiException {
        ApiResponse<UserGet> resp = createUserWithHttpInfo(userPost);
        return resp.getData();
    }

    /**
     * Create a new user.
     * 
     * @param userPost User object to create. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserGet> createUserWithHttpInfo(UserPost userPost) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(userPost, null, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new user. (asynchronously)
     * 
     * @param userPost User object to create. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(UserPost userPost, final ApiCallback<UserGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(userPost, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUser
     * @param userId Identifier of the user. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCall(UUID userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserValidateBeforeCall(UUID userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUserCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a user.
     * 
     * @param userId Identifier of the user. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserGet deleteUser(UUID userId) throws ApiException {
        ApiResponse<UserGet> resp = deleteUserWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete a user.
     * 
     * @param userId Identifier of the user. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserGet> deleteUserWithHttpInfo(UUID userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a user. (asynchronously)
     * 
     * @param userId Identifier of the user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(UUID userId, final ApiCallback<UserGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllUsers
     * @param mode Filter the user mode. (optional)
     * @param role Filter the user role. (optional)
     * @param commonName Filter the user X500 common name. (optional)
     * @param organization Filter the user X500 organization. (optional)
     * @param organizationalUnit Filter the user X500 organizational unit. (optional)
     * @param locality Filter the user X500 locality. (optional)
     * @param country Filter the user X500 country. (optional)
     * @param userId Filter the user X500 organization. (optional)
     * @param email Filter the user email. (optional)
     * @param status Filter the user status. (optional)
     * @param countryCallingCode Filter the user country calling code. (optional)
     * @param phone Filter the user phone. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllUsersCall(String mode, String role, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String email, String status, String countryCallingCode, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/user/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mode != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        }

        if (role != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        }

        if (commonName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("commonName", commonName));
        }

        if (organization != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("organization", organization));
        }

        if (organizationalUnit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("organizationalUnit", organizationalUnit));
        }

        if (locality != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locality", locality));
        }

        if (country != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("country", country));
        }

        if (userId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        }

        if (email != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (countryCallingCode != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("countryCallingCode", countryCallingCode));
        }

        if (phone != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("phone", phone));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllUsersValidateBeforeCall(String mode, String role, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String email, String status, String countryCallingCode, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllUsersCall(mode, role, commonName, organization, organizationalUnit, locality, country, userId, email, status, countryCallingCode, phone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all users.
     * 
     * @param mode Filter the user mode. (optional)
     * @param role Filter the user role. (optional)
     * @param commonName Filter the user X500 common name. (optional)
     * @param organization Filter the user X500 organization. (optional)
     * @param organizationalUnit Filter the user X500 organizational unit. (optional)
     * @param locality Filter the user X500 locality. (optional)
     * @param country Filter the user X500 country. (optional)
     * @param userId Filter the user X500 organization. (optional)
     * @param email Filter the user email. (optional)
     * @param status Filter the user status. (optional)
     * @param countryCallingCode Filter the user country calling code. (optional)
     * @param phone Filter the user phone. (optional)
     * @return List&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserGet> getAllUsers(String mode, String role, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String email, String status, String countryCallingCode, String phone) throws ApiException {
        ApiResponse<List<UserGet>> resp = getAllUsersWithHttpInfo(mode, role, commonName, organization, organizationalUnit, locality, country, userId, email, status, countryCallingCode, phone);
        return resp.getData();
    }

    /**
     * List all users.
     * 
     * @param mode Filter the user mode. (optional)
     * @param role Filter the user role. (optional)
     * @param commonName Filter the user X500 common name. (optional)
     * @param organization Filter the user X500 organization. (optional)
     * @param organizationalUnit Filter the user X500 organizational unit. (optional)
     * @param locality Filter the user X500 locality. (optional)
     * @param country Filter the user X500 country. (optional)
     * @param userId Filter the user X500 organization. (optional)
     * @param email Filter the user email. (optional)
     * @param status Filter the user status. (optional)
     * @param countryCallingCode Filter the user country calling code. (optional)
     * @param phone Filter the user phone. (optional)
     * @return ApiResponse&lt;List&lt;UserGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserGet>> getAllUsersWithHttpInfo(String mode, String role, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String email, String status, String countryCallingCode, String phone) throws ApiException {
        com.squareup.okhttp.Call call = getAllUsersValidateBeforeCall(mode, role, commonName, organization, organizationalUnit, locality, country, userId, email, status, countryCallingCode, phone, null, null);
        Type localVarReturnType = new TypeToken<List<UserGet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all users. (asynchronously)
     * 
     * @param mode Filter the user mode. (optional)
     * @param role Filter the user role. (optional)
     * @param commonName Filter the user X500 common name. (optional)
     * @param organization Filter the user X500 organization. (optional)
     * @param organizationalUnit Filter the user X500 organizational unit. (optional)
     * @param locality Filter the user X500 locality. (optional)
     * @param country Filter the user X500 country. (optional)
     * @param userId Filter the user X500 organization. (optional)
     * @param email Filter the user email. (optional)
     * @param status Filter the user status. (optional)
     * @param countryCallingCode Filter the user country calling code. (optional)
     * @param phone Filter the user phone. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllUsersAsync(String mode, String role, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String email, String status, String countryCallingCode, String phone, final ApiCallback<List<UserGet>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllUsersValidateBeforeCall(mode, role, commonName, organization, organizationalUnit, locality, country, userId, email, status, countryCallingCode, phone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserGet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserById
     * @param userId Identifier of the user. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserByIdCall(UUID userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByIdValidateBeforeCall(UUID userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserById(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserByIdCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a user by his identifier.
     * 
     * @param userId Identifier of the user. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserGet getUserById(UUID userId) throws ApiException {
        ApiResponse<UserGet> resp = getUserByIdWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Get a user by his identifier.
     * 
     * @param userId Identifier of the user. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserGet> getUserByIdWithHttpInfo(UUID userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserByIdValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a user by his identifier. (asynchronously)
     * 
     * @param userId Identifier of the user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByIdAsync(UUID userId, final ApiCallback<UserGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByIdValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUser
     * @param userId Identifier of the user. (required)
     * @param userPut User object to update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserCall(UUID userId, UserPut userPut, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userPut;

        // create path and map variables
        String localVarPath = "/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "CookieAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(UUID userId, UserPut userPut, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'userPut' is set
        if (userPut == null) {
            throw new ApiException("Missing the required parameter 'userPut' when calling updateUser(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserCall(userId, userPut, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a user.
     * 
     * @param userId Identifier of the user. (required)
     * @param userPut User object to update. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserGet updateUser(UUID userId, UserPut userPut) throws ApiException {
        ApiResponse<UserGet> resp = updateUserWithHttpInfo(userId, userPut);
        return resp.getData();
    }

    /**
     * Update a user.
     * 
     * @param userId Identifier of the user. (required)
     * @param userPut User object to update. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserGet> updateUserWithHttpInfo(UUID userId, UserPut userPut) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(userId, userPut, null, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a user. (asynchronously)
     * 
     * @param userId Identifier of the user. (required)
     * @param userPut User object to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(UUID userId, UserPut userPut, final ApiCallback<UserGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(userId, userPut, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
