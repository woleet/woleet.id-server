/*
 * Woleet.ID Server
 * This is Woleet.ID Server API documentation.
 *
 * The version of the OpenAPI document: 1.2.7
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.idserver.api;

import io.woleet.idserver.ApiCallback;
import io.woleet.idserver.ApiClient;
import io.woleet.idserver.ApiException;
import io.woleet.idserver.ApiResponse;
import io.woleet.idserver.Configuration;
import io.woleet.idserver.Pair;
import io.woleet.idserver.ProgressRequestBody;
import io.woleet.idserver.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.woleet.idserver.api.model.APIError;
import java.util.UUID;
import io.woleet.idserver.api.model.UserGet;
import io.woleet.idserver.api.model.UserPost;
import io.woleet.idserver.api.model.UserPut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createUser
     * @param userPost User object to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(UserPost userPost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userPost;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APITokenAuth", "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(UserPost userPost, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPost' is set
        if (userPost == null) {
            throw new ApiException("Missing the required parameter 'userPost' when calling createUser(Async)");
        }
        

        okhttp3.Call localVarCall = createUserCall(userPost, _callback);
        return localVarCall;

    }

    /**
     * Create a new user.
     * 
     * @param userPost User object to create. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
     </table>
     */
    public UserGet createUser(UserPost userPost) throws ApiException {
        ApiResponse<UserGet> localVarResp = createUserWithHttpInfo(userPost);
        return localVarResp.getData();
    }

    /**
     * Create a new user.
     * 
     * @param userPost User object to create. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGet> createUserWithHttpInfo(UserPost userPost) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(userPost, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new user. (asynchronously)
     * 
     * @param userPost User object to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(UserPost userPost, final ApiCallback<UserGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(userPost, _callback);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param userId Identifier of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APITokenAuth", "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Delete a user.
     * 
     * @param userId Identifier of the user. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public UserGet deleteUser(UUID userId) throws ApiException {
        ApiResponse<UserGet> localVarResp = deleteUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Delete a user.
     * 
     * @param userId Identifier of the user. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGet> deleteUserWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a user. (asynchronously)
     * 
     * @param userId Identifier of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(UUID userId, final ApiCallback<UserGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserById
     * @param userId Identifier of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserByIdCall(UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APITokenAuth", "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserById(Async)");
        }
        

        okhttp3.Call localVarCall = getUserByIdCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Get a user by his identifier.
     * 
     * @param userId Identifier of the user. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public UserGet getUserById(UUID userId) throws ApiException {
        ApiResponse<UserGet> localVarResp = getUserByIdWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get a user by his identifier.
     * 
     * @param userId Identifier of the user. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGet> getUserByIdWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user by his identifier. (asynchronously)
     * 
     * @param userId Identifier of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserByIdAsync(UUID userId, final ApiCallback<UserGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param offset Offset of the returned results (0 to get all results from the beginning). (optional)
     * @param limit Maximum number of returned results. (optional)
     * @param search Filter the users using a search string.&lt;br&gt; Only users whose &#x60;email&#x60;, &#x60;username&#x60;, &#x60;identity.commonName&#x60;, &#x60;identity.organization&#x60; or &#x60;identity.organizationalUnit&#x60; contains the search string match.  (optional)
     * @param mode Filter the users by their mode (exact match). (optional)
     * @param role Filter the users by their role (exact match). (optional)
     * @param email Filter the users by their email (exact match). (optional)
     * @param username Filter the users by their username (exact match). (optional)
     * @param commonName Filter the users by their X500 common name (exact match). (optional)
     * @param organization Filter the users by their X500 organization (exact match). (optional)
     * @param organizationalUnit Filter the users by their X500 organizational unit (exact match). (optional)
     * @param locality Filter the users by their X500 locality (exact match). (optional)
     * @param country Filter the users by their X500 country (exact match). (optional)
     * @param userId Filter the users by their X500 custom user identifier (exact match). (optional)
     * @param countryCallingCode Filter the users by their country calling code (exact match). (optional)
     * @param phone Filter the users by their phone (exact match). (optional)
     * @param status Filter the users by their status (exact match). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(Integer offset, Integer limit, String search, String mode, String role, String email, String username, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String countryCallingCode, String phone, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (commonName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commonName", commonName));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (organizationalUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationalUnit", organizationalUnit));
        }

        if (locality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locality", locality));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (countryCallingCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCallingCode", countryCallingCode));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APITokenAuth", "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(Integer offset, Integer limit, String search, String mode, String role, String email, String username, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String countryCallingCode, String phone, String status, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getUsersCall(offset, limit, search, mode, role, email, username, commonName, organization, organizationalUnit, locality, country, userId, countryCallingCode, phone, status, _callback);
        return localVarCall;

    }

    /**
     * Get all the users matching a set of filters.
     * Use this operation to get all the users, or a subset of the users matching specified filters.&lt;br&gt; Results can be paged. 
     * @param offset Offset of the returned results (0 to get all results from the beginning). (optional)
     * @param limit Maximum number of returned results. (optional)
     * @param search Filter the users using a search string.&lt;br&gt; Only users whose &#x60;email&#x60;, &#x60;username&#x60;, &#x60;identity.commonName&#x60;, &#x60;identity.organization&#x60; or &#x60;identity.organizationalUnit&#x60; contains the search string match.  (optional)
     * @param mode Filter the users by their mode (exact match). (optional)
     * @param role Filter the users by their role (exact match). (optional)
     * @param email Filter the users by their email (exact match). (optional)
     * @param username Filter the users by their username (exact match). (optional)
     * @param commonName Filter the users by their X500 common name (exact match). (optional)
     * @param organization Filter the users by their X500 organization (exact match). (optional)
     * @param organizationalUnit Filter the users by their X500 organizational unit (exact match). (optional)
     * @param locality Filter the users by their X500 locality (exact match). (optional)
     * @param country Filter the users by their X500 country (exact match). (optional)
     * @param userId Filter the users by their X500 custom user identifier (exact match). (optional)
     * @param countryCallingCode Filter the users by their country calling code (exact match). (optional)
     * @param phone Filter the users by their phone (exact match). (optional)
     * @param status Filter the users by their status (exact match). (optional)
     * @return List&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users. </td><td>  -  </td></tr>
     </table>
     */
    public List<UserGet> getUsers(Integer offset, Integer limit, String search, String mode, String role, String email, String username, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String countryCallingCode, String phone, String status) throws ApiException {
        ApiResponse<List<UserGet>> localVarResp = getUsersWithHttpInfo(offset, limit, search, mode, role, email, username, commonName, organization, organizationalUnit, locality, country, userId, countryCallingCode, phone, status);
        return localVarResp.getData();
    }

    /**
     * Get all the users matching a set of filters.
     * Use this operation to get all the users, or a subset of the users matching specified filters.&lt;br&gt; Results can be paged. 
     * @param offset Offset of the returned results (0 to get all results from the beginning). (optional)
     * @param limit Maximum number of returned results. (optional)
     * @param search Filter the users using a search string.&lt;br&gt; Only users whose &#x60;email&#x60;, &#x60;username&#x60;, &#x60;identity.commonName&#x60;, &#x60;identity.organization&#x60; or &#x60;identity.organizationalUnit&#x60; contains the search string match.  (optional)
     * @param mode Filter the users by their mode (exact match). (optional)
     * @param role Filter the users by their role (exact match). (optional)
     * @param email Filter the users by their email (exact match). (optional)
     * @param username Filter the users by their username (exact match). (optional)
     * @param commonName Filter the users by their X500 common name (exact match). (optional)
     * @param organization Filter the users by their X500 organization (exact match). (optional)
     * @param organizationalUnit Filter the users by their X500 organizational unit (exact match). (optional)
     * @param locality Filter the users by their X500 locality (exact match). (optional)
     * @param country Filter the users by their X500 country (exact match). (optional)
     * @param userId Filter the users by their X500 custom user identifier (exact match). (optional)
     * @param countryCallingCode Filter the users by their country calling code (exact match). (optional)
     * @param phone Filter the users by their phone (exact match). (optional)
     * @param status Filter the users by their status (exact match). (optional)
     * @return ApiResponse&lt;List&lt;UserGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserGet>> getUsersWithHttpInfo(Integer offset, Integer limit, String search, String mode, String role, String email, String username, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String countryCallingCode, String phone, String status) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(offset, limit, search, mode, role, email, username, commonName, organization, organizationalUnit, locality, country, userId, countryCallingCode, phone, status, null);
        Type localVarReturnType = new TypeToken<List<UserGet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users matching a set of filters. (asynchronously)
     * Use this operation to get all the users, or a subset of the users matching specified filters.&lt;br&gt; Results can be paged. 
     * @param offset Offset of the returned results (0 to get all results from the beginning). (optional)
     * @param limit Maximum number of returned results. (optional)
     * @param search Filter the users using a search string.&lt;br&gt; Only users whose &#x60;email&#x60;, &#x60;username&#x60;, &#x60;identity.commonName&#x60;, &#x60;identity.organization&#x60; or &#x60;identity.organizationalUnit&#x60; contains the search string match.  (optional)
     * @param mode Filter the users by their mode (exact match). (optional)
     * @param role Filter the users by their role (exact match). (optional)
     * @param email Filter the users by their email (exact match). (optional)
     * @param username Filter the users by their username (exact match). (optional)
     * @param commonName Filter the users by their X500 common name (exact match). (optional)
     * @param organization Filter the users by their X500 organization (exact match). (optional)
     * @param organizationalUnit Filter the users by their X500 organizational unit (exact match). (optional)
     * @param locality Filter the users by their X500 locality (exact match). (optional)
     * @param country Filter the users by their X500 country (exact match). (optional)
     * @param userId Filter the users by their X500 custom user identifier (exact match). (optional)
     * @param countryCallingCode Filter the users by their country calling code (exact match). (optional)
     * @param phone Filter the users by their phone (exact match). (optional)
     * @param status Filter the users by their status (exact match). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(Integer offset, Integer limit, String search, String mode, String role, String email, String username, String commonName, String organization, String organizationalUnit, String locality, String country, String userId, String countryCallingCode, String phone, String status, final ApiCallback<List<UserGet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(offset, limit, search, mode, role, email, username, commonName, organization, organizationalUnit, locality, country, userId, countryCallingCode, phone, status, _callback);
        Type localVarReturnType = new TypeToken<List<UserGet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param userId Identifier of the user. (required)
     * @param userPut User object to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied / Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(UUID userId, UserPut userPut, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userPut;

        // create path and map variables
        String localVarPath = "/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "APITokenAuth", "CookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(UUID userId, UserPut userPut, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'userPut' is set
        if (userPut == null) {
            throw new ApiException("Missing the required parameter 'userPut' when calling updateUser(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserCall(userId, userPut, _callback);
        return localVarCall;

    }

    /**
     * Update a user.
     * 
     * @param userId Identifier of the user. (required)
     * @param userPut User object to update. (required)
     * @return UserGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied / Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public UserGet updateUser(UUID userId, UserPut userPut) throws ApiException {
        ApiResponse<UserGet> localVarResp = updateUserWithHttpInfo(userId, userPut);
        return localVarResp.getData();
    }

    /**
     * Update a user.
     * 
     * @param userId Identifier of the user. (required)
     * @param userPut User object to update. (required)
     * @return ApiResponse&lt;UserGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied / Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGet> updateUserWithHttpInfo(UUID userId, UserPut userPut) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, userPut, null);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user. (asynchronously)
     * 
     * @param userId Identifier of the user. (required)
     * @param userPut User object to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid object supplied / Invalid user identifier. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or invalid session cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(UUID userId, UserPut userPut, final ApiCallback<UserGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, userPut, _callback);
        Type localVarReturnType = new TypeToken<UserGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
