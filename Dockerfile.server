FROM node:12.22.12-alpine3.14

RUN apk add --no-cache python3 git gcc g++ make bash postgresql-dev --virtual .build-deps

# Build

RUN node -v
RUN npm -v

# Install runtime dependencies only
RUN mkdir -p /build/server-runtime
COPY server/package.json /build/server-runtime/
COPY server/package-lock.json /build/server-runtime/
COPY server/patch.js /build/server-runtime/
RUN cd /build/server-runtime && npm i -g npm@7.5.6 && npm i --production && npm run postinstall

# Install runtime and dev dependencies
RUN mkdir -p /build/server
COPY server/package.json /build/server/
COPY server/package-lock.json /build/server/
COPY server/patch.js /build/server/
RUN cd /build/server && npm i -g npm@7.5.6 && npm i --ignore-scripts && npm run postinstall

# Copy sources
COPY server /build/server
COPY types /build/types

RUN cd /build/server && npm run build && \
  mkdir -p /build/app && \
  mv dist /build/app && \
  cp package.json /build/app && \
  cp package-lock.json /build/app && \
  mv /build/server-runtime/node_modules /build/app/node_modules

# https://docs.docker.com/develop/develop-images/multistage-build/
FROM node:12.22.12-alpine3.14

ARG WOLEET_ID_SERVER_API_VERSION_BUILDTIME
ENV WOLEET_ID_SERVER_API_VERSION=$WOLEET_ID_SERVER_API_VERSION_BUILDTIME

RUN apk add --no-cache curl postgresql-dev

COPY --from=0 /build/app /usr/src/app

WORKDIR /usr/src/app

EXPOSE 3000

CMD [ "npm", "start" ]
